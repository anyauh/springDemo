<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
            http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
            http://www.springframework.org/schema/tx
 	  		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
 	  		http://www.springframework.org/schema/context 
      		http://www.springframework.org/schema/context/spring-context-3.2.xsd
      		http://www.springframework.org/schema/aop 
      		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">
    
	<context:component-scan base-package="com.szzt" />
     
     <!-- 引入属性文件 -->
    <context:property-placeholder location="classpath:datasource.properties" />
	<!--<context:property-placeholder location="classpath:config.properties" />-->
	
	
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url"
			value="jdbc:postgresql://${db.ip}:${db.port}/postgres" />
		<property name="username" value="${db.user}" />
		<property name="password" value="${db.password}" />
		<property name="filters" value="${druid.filters}" />
		<property name="maxActive" value="${druid.maxActive}" />
		<property name="initialSize" value="${druid.initialSize}" />
		<property name="maxWait" value="${druid.maxWait}" />
		<property name="minIdle" value="${druid.minIdle}" />
		<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${druid.validationQuery}" />
		<property name="testWhileIdle" value="${druid.testWhileIdle}" />
		<property name="testOnBorrow" value="${druid.testOnBorrow}" />
		<property name="testOnReturn" value="${druid.testOnReturn}" />
		<property name="connectionErrorRetryAttempts" value="${druid.connectionErrorRetryAttempts}" />
		<property name="breakAfterAcquireFailure" value="${druid.breakAfterAcquireFailure}" />
		<property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath:com/szzt/dao/*.xml"></property>
    </bean>  

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.szzt.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>  
  
    <!-- (事务管理)transaction manager -->  
	<bean id="defaultTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<tx:annotation-driven transaction-manager="defaultTransactionManager" />
	
</beans>